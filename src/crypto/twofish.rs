use rand_core::{OsRng, RngCore};

pub const KEY_BYTES: usize = 256 / 8;
pub const BLOCK_BYTES: usize = 128 / 8;
const SUBKEY_NUM: usize = 40;
const SMALL_K: usize = 4;

const MDS_POLY: u8 = 0b01101001;
const MDS: [[u8; 4]; 4] = [
    [0x01, 0xEF, 0x5B, 0x5B],
    [0x5B, 0xEF, 0xEF, 0x01],
    [0xEF, 0x5B, 0x01, 0xEF],
    [0xEF, 0x01, 0xEF, 0x5B],
];

const RS_POLY: u8 = 0b01001101;
const RS: [[u8; 8]; 4] = [
    [0x01, 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E],
    [0xA4, 0x56, 0x82, 0xF3, 0x1E, 0xC6, 0x68, 0xE5],
    [0x02, 0xA1, 0xFC, 0xC1, 0x47, 0xAE, 0x3D, 0x19],
    [0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E, 0x03],
];

const Q0: [u8; 256] = [
    0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38,
    0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48,
    0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82,
    0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61,
    0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1,
    0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7,
    0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71,
    0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7,
    0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90,
    0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF,
    0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64,
    0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A,
    0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D,
    0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34,
    0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4,
    0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0,
];
const Q1: [u8; 256] = [
    0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B,
    0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F,
    0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5,
    0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51,
    0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C,
    0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8,
    0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2,
    0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17,
    0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E,
    0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9,
    0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48,
    0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64,
    0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69,
    0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC,
    0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9,
    0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91,
];

const fn q0(x: u8) -> u8 {
    Q0[x as usize]
}

const fn q1(x: u8) -> u8 {
    Q1[x as usize]
}

#[cfg_attr(test, derive(PartialEq, Eq, Debug))]
#[derive(Clone)]
pub struct Key(pub(crate) [u8; KEY_BYTES]); // 256 bits
pub type Block = [u8; BLOCK_BYTES]; // 128 bits

type Word = u32;

impl Key {
    pub fn generate() -> Self {
        let mut data = [0u8; KEY_BYTES];
        OsRng.fill_bytes(&mut data);

        Self(data)
    }
}

pub fn encrypt_block(key: &Key, block: &Block) -> Block {
    let (schedule, skey) = key_schedule(key);
    let mut words: [Word; 4] =
        bytemuck::must_cast_ref::<_, [[u8; BLOCK_BYTES / 4]; 4]>(block).map(Word::from_le_bytes);

    // input whitening
    for i in 0..4 {
        words[i] ^= schedule[i];
    }

    // rounds
    for r in 0..16 {
        let (f0, f1) = F(words[0], words[1], r, &schedule, &skey);
        let old_words = words;

        words[0] = (old_words[2] ^ f0).rotate_right(1);
        words[1] = old_words[3].rotate_left(1) ^ f1;
        words[2] = old_words[0];
        words[3] = old_words[1];
    }

    // output whitening
    let old_words = words;
    for i in 0..4 {
        words[i] = old_words[(i + 2) % 4] ^ schedule[i + 4];
    }

    bytemuck::must_cast(words.map(Word::to_le_bytes))
}

pub fn decrypt_block(key: &Key, block: &Block) -> Block {
    let (schedule, skey) = key_schedule(key);
    let mut words: [Word; 4] =
        bytemuck::must_cast_ref::<_, [[u8; BLOCK_BYTES / 4]; 4]>(block).map(Word::from_le_bytes);

    // output un-whitening
    let old_words = words;
    for i in 0..4 {
        words[i] = old_words[(i + 2) % 4] ^ schedule[((i + 2) % 4) + 4];
    }

    // un-rounds
    for r in (0..16).rev() {
        let (f0, f1) = F(words[2], words[3], r, &schedule, &skey);
        let old_words = words;

        words[0] = old_words[2];
        words[1] = old_words[3];
        words[2] = old_words[0].rotate_left(1) ^ f0;
        words[3] = (old_words[1] ^ f1).rotate_right(1);
    }

    // input un-whitening
    for i in 0..4 {
        words[i] ^= schedule[i];
    }

    bytemuck::must_cast(words.map(Word::to_le_bytes))
}

fn key_schedule(key: &Key) -> ([Word; SUBKEY_NUM], [Word; SMALL_K]) {
    let key = &key.0;
    let m = bytemuck::must_cast_ref::<_, [[u8; 4]; 2 * SMALL_K]>(key).map(Word::from_le_bytes);
    let me: [Word; SMALL_K] = [m[0], m[2], m[4], m[6]];
    let mo: [Word; SMALL_K] = [m[1], m[3], m[5], m[7]];

    let mut skey: [[u8; 4]; 4] = [[0u8; 4]; 4];
    for i in 0..4 {
        #[allow(clippy::needless_range_loop)]
        for j in 0..4 {
            skey[i][j] = gf_mul(RS[j][0], key[8 * i], RS_POLY)
                ^ gf_mul(RS[j][1], key[8 * i + 1], RS_POLY)
                ^ gf_mul(RS[j][2], key[8 * i + 2], RS_POLY)
                ^ gf_mul(RS[j][3], key[8 * i + 3], RS_POLY)
                ^ gf_mul(RS[j][4], key[8 * i + 4], RS_POLY)
                ^ gf_mul(RS[j][5], key[8 * i + 5], RS_POLY)
                ^ gf_mul(RS[j][6], key[8 * i + 6], RS_POLY)
                ^ gf_mul(RS[j][7], key[8 * i + 7], RS_POLY);
        }
    }

    let mut skey = skey.map(Word::from_le_bytes);
    skey.reverse();

    let rho = (1 << 24) + (1 << 16) + (1 << 8) + 1;
    let mut schedule: [Word; SUBKEY_NUM] = [0; SUBKEY_NUM];
    for i in 0..(SUBKEY_NUM / 2) {
        let iw = i as Word;
        let a = h(2 * iw * rho, &me);
        let b = h((2 * iw + 1) * rho, &mo).rotate_left(8);

        schedule[2 * i] = a.wrapping_add(b);
        schedule[2 * i + 1] = a.wrapping_add(b.wrapping_shl(1) /* 2*B */).rotate_left(9);
    }

    (schedule, skey)
}

#[allow(non_snake_case)]
fn F(
    r0: Word,
    r1: Word,
    round: usize,
    schedule: &[Word; SUBKEY_NUM],
    skey: &[Word; SMALL_K],
) -> (Word, Word) {
    let t0 = g(r0, skey);
    let t1 = g(r1.rotate_left(8), skey);

    let f0 = t0.wrapping_add(t1).wrapping_add(schedule[2 * round + 8]);
    let f1 = t0
        .wrapping_add(t1.wrapping_shl(1) /* multiply by 2 */)
        .wrapping_add(schedule[2 * round + 9]);

    (f0, f1)
}

fn g(x: Word, skey: &[Word; SMALL_K]) -> Word {
    h(x, skey)
}

fn h(x: Word, l: &[Word; SMALL_K]) -> Word {
    let mut y = x.to_le_bytes();
    let l = l.map(Word::to_le_bytes);

    y[0] = q1(y[0]) ^ l[3][0];
    y[1] = q0(y[1]) ^ l[3][1];
    y[2] = q0(y[2]) ^ l[3][2];
    y[3] = q1(y[3]) ^ l[3][3];

    y[0] = q1(y[0]) ^ l[2][0];
    y[1] = q1(y[1]) ^ l[2][1];
    y[2] = q0(y[2]) ^ l[2][2];
    y[3] = q0(y[3]) ^ l[2][3];

    y[0] = q1(q0(q0(y[0]) ^ l[1][0]) ^ l[0][0]);
    y[1] = q0(q0(q1(y[1]) ^ l[1][1]) ^ l[0][1]);
    y[2] = q1(q1(q0(y[2]) ^ l[1][2]) ^ l[0][2]);
    y[3] = q0(q1(q1(y[3]) ^ l[1][3]) ^ l[0][3]);

    let mut z = [0u8; 4];
    for i in 0..4 {
        z[i] = gf_mul(MDS[i][0], y[0], MDS_POLY)
            ^ gf_mul(MDS[i][1], y[1], MDS_POLY)
            ^ gf_mul(MDS[i][2], y[2], MDS_POLY)
            ^ gf_mul(MDS[i][3], y[3], MDS_POLY);
    }

    Word::from_le_bytes(z)
}

// multiply 2 bytes in GF(2^8).
fn gf_mul(mut a: u8, mut b: u8, m: u8) -> u8 {
    let mut sum = 0;
    while a > 0 {
        if a & 1 > 0 {
            sum ^= b;
        }
        a >>= 1;

        if b & 0x80 > 0 {
            // if b << 1 would overflow
            b = b.wrapping_shl(1) ^ m;
        } else {
            b <<= 1;
        }
    }
    sum
}

#[cfg(test)]
mod tests {
    use twofish::{
        cipher::{generic_array::GenericArray, BlockEncrypt, KeyInit},
        Twofish,
    };

    use super::*;

    #[test]
    fn encrypt_decrypt() {
        let data: Block = *b"helloworld!!!!!!";
        let key = Key::generate();

        let ciphertext = encrypt_block(&key, &data);
        assert_eq!(decrypt_block(&key, &ciphertext), data);
    }

    #[test]
    fn same_as_twofish() {
        let key = Key::generate();
        let twofish = Twofish::new_from_slice(&key.0).unwrap();

        let data: Block = *b"helloworld!!!!!!";
        let my_twofish = encrypt_block(&key, &data);

        let mut official_twofish = GenericArray::clone_from_slice(&data);
        twofish.encrypt_block(&mut official_twofish);

        assert_eq!(my_twofish, &*official_twofish)
    }
}
